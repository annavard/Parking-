//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @com.company.vehicle.Vehicle com.company.transaction.Booking
//  @ Author : @Nick Sargsyan, Anna Vardanyan
//
//

package com.company.ticker;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class DailyTicker {
	private List<TickerObserver> observers;
	private static DailyTicker sharedTicker;
	private static final ScheduledExecutorService worker = Executors.newSingleThreadScheduledExecutor();
	private Runnable task = new Runnable() {
		public void run() {
			tick();
		}
	};

	private DailyTicker() {
		this.observers = new ArrayList<>();
		worker.schedule(task, 10, TimeUnit.SECONDS);
	}

	public static DailyTicker sharedTicker() {
		if (sharedTicker == null) {
			sharedTicker = new DailyTicker();
		}

		return sharedTicker;
	}

	public void attach(TickerObserver observer) {
		observers.add(observer);
	}
	
	public void tick() {
		notify(new Date());
		worker.schedule(task, 10, TimeUnit.SECONDS);
	}
	
	public void notify(Date date) {
		for (TickerObserver observer : observers) {
			observer.tickMade(date);
		}
	}
}
