//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @com.company.vehicle.Vehicle com.company.transaction.Booking
//  @ Author : @Nick Sargsyan, Anna Vardanyan
//
//

package com.company.system;

import com.company.gps.GPSTrackerController;
import com.company.gps.Location;
import com.company.humanResources.HumanResourceController;
import com.company.lock.SecuritySystemController;
import com.company.property.PropertyController;
import com.company.property.parking.Parking;
import com.company.property.vehicle.Vehicle;
import com.company.ticker.DailyTicker;
import com.company.ticker.TickerObserver;
import com.company.transaction.*;
import com.company.utility.Mailer;

import java.util.Date;
import java.util.List;

public class VehicleSystem implements TickerObserver {
	private static VehicleSystem sharedSystem;

	private HumanResourceController humanResourceController;
	private PropertyController propertyController;
	private TransactionController transactionController;
	private SecuritySystemController securitySystemController;
	private GPSTrackerController gpsController;

	private VehicleSystem() {
		this.humanResourceController = new HumanResourceController();
		this.propertyController = new PropertyController();
		this.transactionController = new TransactionController();
		this.securitySystemController = new SecuritySystemController();
		this.gpsController = new GPSTrackerController();

		DailyTicker.sharedTicker().attach(this);
	}

	public static VehicleSystem sharedSystem() {
		if (sharedSystem == null) {
			sharedSystem = new VehicleSystem();
		}

		return sharedSystem;
	}

	public boolean register(String fullName, String password, String email, String paymentMethod, String passportSerial, String phoneNumber) {
		return humanResourceController.registerUser(fullName, password, email, paymentMethod, passportSerial, phoneNumber);
	}
	
	public String login(String email, String password) {
		return humanResourceController.loginUser(email, password);
	}
	
	public List<Parking> getParkings() {
		return propertyController.getParkings();
	}
	
	public List<Vehicle> searchInParking(String producer, String parkingId, int minPrice, int maxPrice, int seats, float minVolume, float maxVolume) {
		return propertyController.searchInParking(producer, parkingId, minPrice, maxPrice, seats, minVolume, maxVolume);
	}
	
	public boolean bookVehicle(String userId, String parkingId, String vehicleId, Date bookStart, Date bookEnd) {
		boolean isLoggedIn = humanResourceController.isUserLoggedIn(userId);

		if (!isLoggedIn) {
			return false;
		}

		boolean vehicleExists = propertyController.doVehicleExists(vehicleId, parkingId);

		if (!vehicleExists) {
			return false;
		}

		Token[] tokens = transactionController.addBooking(userId, vehicleId, parkingId, bookStart, bookEnd);

		if (tokens == null) {
			return false;
		}

		String email = humanResourceController.findUserEmail(userId);
		Mailer.sharedMailer().sendTokens(email, tokens);

		return true;
	}
	
	public boolean unlockMainGate(String tokenId, String email, String password, String lockId) {
		return unlockTarget(tokenId, email, password, lockId, Token.TARGET_TYPE_MAIN_GATE, new ParkingTargetStrategy());
	}
	
	public boolean unlockSecondGate(String tokenId, String email, String password, String lockId) {
		boolean unlockSuccess = unlockTarget(tokenId, email, password, lockId, Token.TARGET_TYPE_SECOND_GATE, new ParkingTargetStrategy());

		if (!unlockSuccess) {
			return false;
		}

		Transaction transaction = findTransactionForUser(email, password);
		notifySupportCrew(transaction, lockId);

		return true;
	}
	
	public boolean unlockVehicle(String tokenId, String email, String password, String lockId) {
		boolean unlockSuccess = unlockTarget(tokenId, email, password, lockId, Token.TARGET_TYPE_VEHICLE, new VehicleTargetStrategy());

		if (!unlockSuccess) {
			return false;
		}

		sendSecondGateToken(email, password);
		processUserTransaction(email, password);

		return true;
	}

	@Override
	public void tickMade(Date date) {
		Transaction transaction = transactionController.findAndProcessViolator(date);

		while (transaction != null) {
			Location location = gpsController.getLocation(transaction.getVehicleId());
			notifySecurityCrew(location, transaction);

			transaction = transactionController.findAndProcessViolator(date);
		}
	}

	public void solveCase(String vehicleId, String notes) {
		Transaction transaction = transactionController.findActiveTransaction(vehicleId);
		transactionController.processTransaction(transaction, notes);
	}

	public void activateLock(String lockId, String notes) {
		securitySystemController.findAndLock(lockId);
		String vehicleId = securitySystemController.getTarget(lockId);
		Transaction transaction = transactionController.findActiveTransaction(vehicleId);
		transactionController.processTransaction(transaction, notes);
	}

	private Transaction findTransactionForUser(String email, String password) {
		String userId = humanResourceController.findUserId(email, password);

		if (userId == null) {
			return null;
		}

		return transactionController.findTransaction(userId);
	}

	private void sendSecondGateToken(String email, String password) {
		Transaction transaction = findTransactionForUser(email, password);
		Token token = transactionController.makeToken(transaction, Token.TARGET_TYPE_SECOND_GATE);
		Mailer.sharedMailer().sendTokens(email, new Token[]{token});
	}

	private void processUserTransaction(String email, String password) {
		Transaction transaction = findTransactionForUser(email, password);
		transactionController.processTransaction(transaction, null);
	}

	private void notifySupportCrew(Transaction transaction, String lockId) {
		humanResourceController.notifySupportCrew(transaction.getParkingId(), transaction.getVehicleId(), lockId);
	}
	
	private void notifySecurityCrew(Location location, Transaction transaction) {
		humanResourceController.notifySecurityCrew(location, transaction.getVehicleId(), transaction.getParkingId());
	}

	private boolean unlockTarget(String tokenId, String email, String password, String lockId, String targetType, TargetStrategy targetStrategy) {
		Transaction transaction = findTransactionForUser(email, password);

		if (transaction == null) {
			return false;
		}

		String targetId = targetStrategy.retrieveTarget(transaction);

		boolean tokenExists = transactionController.doTokenExists(tokenId, transaction.getUserId(), targetId, targetType);

		if (!tokenExists) {
			return false;
		}

		boolean unlockSuccess = securitySystemController.findAndUnlock(lockId, targetId, targetType);

		if (!unlockSuccess) {
			return false;
		}

		transactionController.removeToken(tokenId, transaction.getUserId(), targetId, targetType);

		return true;
	}
}